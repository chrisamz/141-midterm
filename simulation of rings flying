import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.animation import FuncAnimation

def create_galaxy(N_ring, N_particles, R, vel_galaxy, pos_offset, vel_offset):
    pos = np.zeros((N_ring, N_particles, 3))
    vel = np.zeros((N_ring, N_particles, 3))
    for i in range(N_ring):
        theta = np.linspace(0, 2*np.pi, N_particles)
        radius = R + i
        pos[i, :, 0] = radius * np.cos(theta)
        pos[i, :, 1] = radius * np.sin(theta)
        vel[i, :, 0] = -vel_galaxy * np.sin(theta)
        vel[i, :, 1] = vel_galaxy * np.cos(theta)
        pos[i] += pos_offset
        vel[i] += vel_offset
    return pos.reshape(-1, 3), vel.reshape(-1, 3)

N_ring = 11
N_particles = 12 + 3 * N_ring
R = 1
vel = 0.02
G = 1
mass1 = 1
mass2 = 1
mass_central1 = 10000
mass_central2 = 10000
pos_offset1 = [-3, 0, 0]
pos_offset2 = [3, 0, 0]
vel_offset1 = [0, 0.05, 0]
vel_offset2 = [0, -0.05, 0]
dt = 0.01
t_end = 5

# Create the galaxies
pos1, vel1 = create_galaxy(N_ring, N_particles, R, vel, pos_offset1, vel_offset1)
pos2, vel2 = create_galaxy(N_ring, N_particles, R, vel, pos_offset2, vel_offset2)

vel1 = vel1.reshape(-1, 3)
vel2 = vel2.reshape(-1, 3)




# Initialize the lists that will contain the positions of the galaxies over time
pos1_list = [pos1]
vel1_list = [vel1]
pos2_list = [pos2]
vel2_list = [vel2]

# Initialize the central positions and velocities
central_pos1 = [np.mean(pos1, axis=0)]
central_vel1 = [np.mean(vel1, axis=0)]
central_pos2 = [np.mean(pos2, axis=0)]
central_vel2 = [np.mean(vel2, axis=0)]

for _ in np.arange(0, t_end, dt):
    r1 = np.linalg.norm(central_pos2[-1] - pos1, axis=1)
    r2 = np.linalg.norm(central_pos1[-1] - pos2, axis=1)
    r12 = np.linalg.norm(central_pos2[-1] - central_pos1[-1])
    
    r1 = r1.reshape(-1, 1)
    r2 = r2.reshape(-1, 1)

    acc1 = G * mass2 / r1**3 * (central_pos2[-1] - pos1)
    acc2 = G * mass1 / r2**3 * (central_pos1[-1] - pos2)
    acc_central1 = G * mass_central2 / r12**3 * (central_pos2[-1] - central_pos1[-1])
    acc_central2 = G * mass_central1 / r12**3 * (central_pos1[-1] - central_pos2[-1])

# Update velocities
vel1 += acc1 * dt
vel2 += acc2 * dt
central_vel1 += acc_central1 * dt
central_vel2 += acc_central2 * dt

# Update positions
pos1 += vel1 * dt
pos2 += vel2 * dt
central_pos1 += central_vel1 * dt
central_pos2 += central_vel2 * dt

# Append the new positions to the lists
pos1_list.append(pos1)
vel1_list.append(vel1)
pos2_list.append(pos2)
vel2_list.append(vel2)

# Convert the lists to NumPy arrays
pos1_list = np.array(pos1_list)
vel1_list = np.array(vel1_list)
pos2_list = np.array(pos2_list)
vel2_list = np.array(vel2_list)

from IPython.display import HTML

from matplotlib.animation import FFMpegWriter

# Create the animation
fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111, projection='3d')

dots1, = ax.plot([], [], [], 'b.', markersize=1)
dots2, = ax.plot([], [], [], 'r.', markersize=1)

ax.set_xlim(-10, 10)
ax.set_ylim(-10, 10)
ax.set_zlim(-1, 1)

def update(i):
    # Update positions based on velocities
    pos1_list[i+1] = pos1_list[i] + vel1_list[i] * dt
    pos2_list[i+1] = pos2_list[i] + vel2_list[i] * dt
    
    # Update the positions of the scatter plots
    dots1.set_data(pos1_list[i+1,:,0], pos1_list[i+1,:,1])
    dots1.set_3d_properties(pos1_list[i+1,:,2])
    dots2.set_data(pos2_list[i+1,:,0], pos2_list[i+1,:,1])
    dots2.set_3d_properties(pos2_list[i+1,:,2])
    
    return dots1, dots2

anim = FuncAnimation(fig, update, frames=len(pos1_list)-1, interval=50)

# Save the animation as a video file
writer = FFMpegWriter(fps=30)
animation_file = "galaxy_collision.mp4"
anim.save(animation_file, writer=writer)

# Display the animation
HTML(f'<video src="{animation_file}" controls autoplay></video>')
