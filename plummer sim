import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numba as njit

# Set up initial conditions
G = 6.67430e-11  # Gravitational constant
m_A = 1e11  # Mass of galaxy A
m_B = 1e11  # Mass of galaxy B
R_min = 25  # Pericenter distance
e = 0.6  # Eccentricity
t_init = -16.4  # Initial time
t_final = 6.086  # Final time
dt = 0.01  # Time step

# Function to calculate gravitational force
def gravitational_force(m1, m2, r):
    return G * m1 * m2 / (r**2)

# Function to calculate acceleration
def acceleration(m1, m2, r, pos):
    force = gravitational_force(m1, m2, r)
    return force * pos / (m1 * r)

# Function to update positions and velocities using Leapfrog integration
def leapfrog_integration(pos, vel, acc, dt):
    pos += vel * dt + 0.5 * acc * dt**2
    vel += 0.5 * acc * dt
    return pos, vel

# Function to simulate the galaxy collision
def simulate_collision():
    t = t_init
    pos_A = np.array([0.7 * R_min, 0])  # Initial position of galaxy A
    vel_A = np.array([0, np.sqrt((1+e) * G * m_B / (0.7 * R_min))])  # Initial velocity of galaxy A
    pos_B = np.array([-0.7 * R_min, 0])  # Initial position of galaxy B
    vel_B = np.array([0, -np.sqrt((1+e) * G * m_A / (0.7 * R_min))])  # Initial velocity of galaxy B

    # Lists to store the positions of test particles
    test_particles_A = []
    test_particles_B = []

    while t <= t_final:
        # Update positions and velocities of galaxies
        r_A = np.linalg.norm(pos_A)
        r_B = np.linalg.norm(pos_B)
        acc_A = acceleration(m_A, m_B, r_A, pos_A)
        acc_B = acceleration(m_B, m_A, r_B, pos_B)
        pos_A, vel_A = leapfrog_integration(pos_A, vel_A, acc_A, dt)
        pos_B, vel_B = leapfrog_integration(pos_B, vel_B, acc_B, dt)

        # Append positions of test particles to the lists
        test_particles_A.append(pos_A.copy())
        test_particles_B.append(pos_B.copy())

        t += dt

    return test_particles_A, test_particles_B

# Run the simulation
test_particles_A, test_particles_B = simulate_collision()

# Plot the positions of test particles
fig, ax = plt.subplots()
ax.set_aspect("equal")
ax.plot(*zip(*test_particles_A), ".", label="Galaxy A")
ax.plot(*zip(*test_particles_B), ".", label="Galaxy B")
ax.set_xlabel("X")
ax.set_ylabel("Y")
ax.legend()
plt.show()


######################################################################################



mass1, mass2 = 1.0, 1.0
pos1, pos2 = np.array([-1.0, 0.0, 0.0]), np.array([1.0, 0.0, 0.0])
vel1, vel2 = np.array([0.0, -0.5, 0.0]), np.array([0.0, 0.5, 0.0])

def leapfrog(pos1, vel1, pos2, vel2, mass1, mass2, dt):
    r = np.linalg.norm(pos2 - pos1)
    F = mass1 * mass2 * (pos2 - pos1) / r**3
    
    vel1 += 0.5 * F / mass1 * dt
    vel2 -= 0.5 * F / mass2 * dt
    
    pos1 += vel1 * dt
    pos2 += vel2 * dt
    
    r = np.linalg.norm(pos2 - pos1)
    F = mass1 * mass2 * (pos2 - pos1) / r**3
    
    vel1 += 0.5 * F / mass1 * dt
    vel2 -= 0.5 * F / mass2 * dt
    
    return pos1, vel1, pos2, vel2

pos1_list = [pos1]
pos2_list = [pos2]

for _ in range(1000):
    pos1, vel1, pos2, vel2 = leapfrog(pos1, vel1, pos2, vel2, mass1, mass2, 0.01)
    pos1_list.append(pos1.copy())
    pos2_list.append(pos2.copy())
    
pos1_array = np.array(pos1_list)
pos2_array = np.array(pos2_list)

plt.figure(figsize=(8,8))
plt.plot(pos1_array[:,0], pos1_array[:,1], label = 'Mass 1')
plt.plot(pos2_array[:,0], pos2_array[:,1], label = 'Mass 2')
plt.legend()
plt.grid(True)
plt.gca().set_aspect('equal', adjustable='box')
plt.title('Trajectories of Two Body System')
plt.xlabel('x')
plt.ylabel('y')
plt.show()


#####################################################################################################


mass1, mass2 = 1.0, 1.0
pos1, pos2 = np.array([-1.0, 0.0, 0.0]), np.array([1.0, 0.0, 0.0])
vel1, vel2 = np.array([0.0, -0.5, 0.0]), np.array([0.0, 0.5, 0.0])

def leapfrog(pos1, vel1, pos2, vel2, mass1, mass2, dt):
    r = np.linalg.norm(pos2 - pos1)
    F = mass1 * mass2 * (pos2 - pos1) / r**3
    
    vel1 += 0.5 * F / mass1 * dt
    vel2 -= 0.5 * F / mass2 * dt
    
    pos1 += vel1 * dt
    pos2 += vel2 * dt
    
    r = np.linalg.norm(pos2 - pos1)
    F = mass1 * mass2 * (pos2 - pos1) / r**3
    
    vel1 += 0.5 * F / mass1 * dt
    vel2 -= 0.5 * F / mass2 * dt
    
    return pos1, vel1, pos2, vel2

pos1_list = [pos1]
pos2_list = [pos2]

for _ in range(1000):
    pos1, vel1, pos2, vel2 = leapfrog(pos1, vel1, pos2, vel2, mass1, mass2, 0.01)
    pos1_list.append(pos1.copy())
    pos2_list.append(pos2.copy())
    
pos1_array = np.array(pos1_list)
pos2_array = np.array(pos2_list)

fig = plt.figure(figsize=(10,10))
ax = fig.add_subplot(111, projection='3d')
ax.plot(pos1_array[:,0], pos1_array[:,1], pos1_array[:,2], label = 'Mass 1')
ax.plot(pos2_array[:,0], pos2_array[:,1], pos2_array[:,2], label = 'Mass 2')
ax.legend()
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_xlabel('z')
plt.title('3D Trajectory')
plt.show()


###############################################################################################


mass1, mass2 = 1.0, 1.0
scale_radius1, scale_radius2 = 1.0, 1.0
pos1, pos2 = np.array([-1.0, 0.0, 0.0]), np.array([1.0, 0.0, 0.0])
vel1, vel2 = np.array([0.0, -0.5, 0.0]), np.array([0.0, 0.5, 0.0])

def leapfrog(pos1, vel1, pos2, vel2, mass1, mass2, dt):
    r = np.linalg.norm(pos2 - pos1)
    F = mass1 * mass2 * (pos2 - pos1) / (r**2 + (scale_radius1 + scale_radius2)**2)**1.5
    
    vel1 += 0.5 * F / mass1 * dt
    vel2 -= 0.5 * F / mass2 * dt
    
    pos1 += vel1 * dt
    pos2 += vel2 * dt
    
    r = np.linalg.norm(pos2 - pos1)
    F = mass1 * mass2 * (pos2 - pos1) / (r**2 + (scale_radius1 + scale_radius2)**2)**1.5
    
    vel1 += 0.5 * F / mass1 * dt
    vel2 -= 0.5 * F / mass2 * dt
    
    return pos1, vel1, pos2, vel2

pos1_list = [pos1]
pos2_list = [pos2]

for _ in range(1000):
    pos1, vel1, pos2, vel2 = leapfrog(pos1, vel1, pos2, vel2, mass1, mass2, 0.01)
    pos1_list.append(pos1.copy())
    pos2_list.append(pos2.copy())
    
pos1_array = np.array(pos1_list)
pos2_array = np.array(pos2_list)

fig = plt.figure(figsize=(10,10))
ax = fig.add_subplot(111, projection='3d')
ax.plot(pos1_array[:,0], pos1_array[:,1], pos1_array[:,2], label = 'Mass 1')
ax.plot(pos2_array[:,0], pos2_array[:,1], pos2_array[:,2], label = 'Mass 2')
ax.legend()
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_xlabel('z')
plt.title('3D Trajectory')
plt.show()


###############################################################################################


def plummer_sphere(N, mass, scale_radius):
    r = (np.random.rand(N)**(-2/3)-1)**(-0.5)
    theta = np.arccos(2*np.random.rand(N)-1)
    phi = 2*np.pi*np.random.rand(N)
    pos = np.zeros((N, 3))
    pos[:,0] = r*np.sin(theta) * np.cos(phi) * scale_radius
    pos[:,1] = r*np.sin(theta) * np.sin(phi) * scale_radius
    pos[:,2] = r*np.cos(theta) * scale_radius
    
    vel = np.zeros((N,3))
    
    return pos, vel

N = 1000
mass1, mass2 = 1.0, 1.0
scale_radius1, scale_radius2 = 1.0, 1.0
pos1, vel1 = plummer_sphere(N, mass1, scale_radius1)
pos2, vel2 = plummer_sphere(N, mass2, scale_radius2)
pos2 += 5

fig = plt.figure(figsize=(10,10))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(pos1[:,0], pos1[:,1], pos1[:,2], s=1, label='plummer sphere 1')
ax.scatter(pos2[:,0], pos2[:,1], pos2[:,2], s=1, label='plummer sphere 2')
ax.legend()
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
plt.title('Initial position of the spheres')
plt.show()

####################################################################################################

N = 1000
mass1, mass2 = 1.0, 1.0
scale_radius1, scale_radius2 = 1.0, 1.0


def generate_plummer(N, mass, scale_radius):
    r = (np.random.rand(N)**(-2/3) -1)**(-0.5)
    theta = np.arccos(2*np.random.rand(N)-1)
    phi = 2*np.pi*np.random.rand(N)
    pos = np.zeros((N, 3))
    pos[:,0] = r * np.sin(theta) * np.cos(phi) * scale_radius
    pos[:,1] = r * np.sin(theta) * np.sin(phi) * scale_radius
    pos[:,2] = r * np.cos(theta) * scale_radius
    
    vel = np.zeros((N, 3))
    
    return pos, vel

pos1, vel1 = generate_plummer(N, mass1, scale_radius1)
pos2, vel2 = generate_plummer(N, mass2, scale_radius2)
pos2 += 5


def leapfrog(pos, vel, mass, dt, eps = 0.01):
    F = np.zeros_like(pos)
    for i in range(len(pos)):
        for j in range(i+1, len(pos)):
            r = np.linalg.norm(pos[j] - pos[1])
            f = mass[i] * mass[j] * (pos[j] - pos[i]) / (r**3 + eps**3)
            F[i] += f
            F[j] -= f
            
        vel += 0.5 * F / mass[:, np.newaxis] * dt
        
        pos += vel * dt
        
        F = np.zeros_like(pos)
        for i in range(len(pos)):
            for j in range(i+1, len(pos)):
                r = np.linalg.norm(pos[j] - pos[i])
                f = mass[i] * mass[j] * (pos[j] - pos[i]) / (r**3 + eps**3)
                F[i] += f
                F[j] -= f
                vel += 0.5 * F / mass[:, np.newaxis] * dt
                return pos, vel
            
pos = np.concatenate([pos1, pos2])
vel = np.concatenate([vel1, vel2])
mass = np.concatenate([mass1/N*np.ones(N), mass2/N*np.ones(N)])

pos_list = [pos.copy()]

for _ in range(1000):
    pos, vel = leapfrog(pos, vel, mass, 0.01)
    pos_list.append(pos.copy())
    
pos_array = np.array(pos_list)

fig = plt.figure(figsize=(20,20))
ax = fig.add_subplot(111, projection = '3d')
for i in range(N):
    ax.plot(pos_array[:,i,0], pos_array[:, i, 1], pos_array[:, i, 2], 'b-', lw=0.1)
for i in range(N, 2*N):
    ax.plot(pos_array[:, i, 0], pos_array[:, i, 1], pos_array[:, i, 2], 'r-', lw=0.1)
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_xlim([-10,10])
ax.set_ylim([-10,10])
ax.set_zlim([-10,10])
plt.title('3D trajectories')
plt.show()



#######################################################################################################


N = 1000
mass1, mass2 = 1.0, 1.0
scale_radius1, scale_radius2 = 1.0, 1.0


def generate_plummer(N, mass, scale_radius):
    r = (np.random.rand(N)**(-2/3) -1)**(-0.5)
    theta = np.arccos(2*np.random.rand(N)-1)
    phi = 2*np.pi*np.random.rand(N)
    pos = np.zeros((N, 3))
    pos[:,0] = r * np.sin(theta) * np.cos(phi) * scale_radius
    pos[:,1] = r * np.sin(theta) * np.sin(phi) * scale_radius
    pos[:,2] = r * np.cos(theta) * scale_radius
    
    vel = np.zeros((N, 3))
    
    return pos, vel

pos1, vel1 = generate_plummer(N, mass1, scale_radius1)
pos2, vel2 = generate_plummer(N, mass2, scale_radius2)
pos2 += 5


def leapfrog(pos, vel, mass, dt, eps = 0.01):
    F = np.zeros_like(pos)
    for i in range(len(pos)):
        for j in range(i+1, len(pos)):
            r = np.linalg.norm(pos[j] - pos[1])
            f = mass[i] * mass[j] * (pos[j] - pos[i]) / (r**3 + eps**3)
            F[i] += f
            F[j] -= f
            
        vel += 0.5 * F / mass[:, np.newaxis] * dt
        
        pos += vel * dt
        
        F = np.zeros_like(pos)
        for i in range(len(pos)):
            for j in range(i+1, len(pos)):
                r = np.linalg.norm(pos[j] - pos[i])
                f = mass[i] * mass[j] * (pos[j] - pos[i]) / (r**3 + eps**3)
                F[i] += f
                F[j] -= f
                vel += 0.5 * F / mass[:, np.newaxis] * dt
                return pos, vel
            
pos = np.concatenate([pos1, pos2])
vel = np.concatenate([vel1, vel2])
mass = np.concatenate([mass1/N*np.ones(N), mass2/N*np.ones(N)])

pos_list = [pos.copy()]

for _ in range(1000):
    pos, vel = leapfrog(pos, vel, mass, 0.01)
    pos_list.append(pos.copy())
    
pos_array = np.array(pos_list)

fig = plt.figure(figsize=(20,20))
ax = fig.add_subplot(111, projection = '3d')

# Final positions
final_pos = pos_array[-1, :, :]

for i in range(N):
    ax.scatter(final_pos[i, 0], final_pos[i, 1], final_pos[i, 2], c='b')
for i in range(N, 2*N):
    ax.scatter(final_pos[i, 0], final_pos[i, 1], final_pos[i, 2], c='r')

ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_xlim([-10,10])
ax.set_ylim([-10,10])
ax.set_zlim([-10,10])
plt.title('3D End Positions')
plt.show()



#############################################################


import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

G = 1.  # gravitational constant
m1 = 1.  # mass of first core
m2 = 1.  # mass of second core
n_particles = 297  # number of disk particles per disk

# function that describes the equations of motion
def equations(t, y):
    d = np.sqrt((y[0]-y[4])**2 + (y[2]-y[6])**2)
    return [
        y[1],
        G*m2*(y[4]-y[0])/d**3,
        y[3],
        G*m2*(y[6]-y[2])/d**3,
        y[5],
        -G*m1*(y[4]-y[0])/d**3,
        y[7],
        -G*m1*(y[6]-y[2])/d**3
    ]

# initial conditions for the cores
y0 = [1., 0., 0., 1., -1., 0., 0., -1.] 

# run the simulation
solution = solve_ivp(equations, [0, 10], y0, rtol=1e-8)

# plot the orbits in 3D
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot(solution.y[0], solution.y[2], solution.t, label='core 1')
ax.plot(solution.y[4], solution.y[6], solution.t, label='core 2')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('Time')
ax.legend()
plt.show()

